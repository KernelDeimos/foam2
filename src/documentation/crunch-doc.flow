<title>CRUNCH Documentation</title>

<h2>Continuous Reactive User Nano-Capability Hierarchy</h2>

<foam class="foam.flow.widgets.DocumentationIncomplete" status="wip" />

<p>
CRUNCH is a CORE subsystem that enables flexible definitions of incremental steps users can take to gain access to features of an application. A key principle of CRUNCH is the user will only enter new information at the time it's required to perform an action. (although it is possible to have users add information ahead of time also)
</p>

<h4>Purpose of this Document</h4>
This document aims to help a developer use CRUNCH within a larger application.
For documentation on CRUNCH internals, see `.flow` documents inside the
`foam.nanos.crunch` package itself.

<h4>CRUNCH Concepts</h4>

<h4>Capability</h4>

<p>
A `Capability` is an action that can be performed on the system. Most capabilities will simply be instances of `foam.nanos.crunch.Capability` in the journal, although subclasses of Capability can be used when special behaviours are desired.
</p>

<p>
Basic configuration of a capability includes specifying what permissions it grants, what information is required from the user, and and when the capability appears.
</p>

<p>
A capability may also depend on other capabilities by its `prerequisites` relationship. In this way, CRUNCH facilitates controlled and incremental aquisition of capabilities.
</p>

<h5>Specify Permissions</h5>
<p>
To specify permissions, use the following property.

<foam class="foam.flow.widgets.PropertyShortSummary" of="foam.nanos.crunch.Capability" whitelist="['permissionsGranted']" />
</p>

<p>
Specifying permissions is optional. A capability which grants no permissions can be useful for grouping other capabilities.
</p>

<h5>Specify Required Information</h5>
<p>
A capability may require some input from the user. For example, a capability allowing a user to create new content may require their acceptance of a privacy policy.
</p>

<p>
The following properties help to specify required information and how it will be processed:
<foam class="foam.flow.widgets.PropertyShortSummary" of="foam.nanos.crunch.Capability" whitelist="['of','daoKey','contextDAOFindKey']" />
</p>

<p>
The class specified by `of` will be displayed to the user before the capability is granted. An instance of this class will be stored in a junction between User and Capability. (the UserCapabilityJunction)
</p>

<p>
The `daoKey` property can be used to specify another DAO where the data will be stored. If this is specified, property names of the class specified by the Capability's `of` should match property names of the class specified by the DAO's of.
</p>

<p>
The `contextDAOFindKey` property allows an object in the context to be used as a starting point for the object that is stored in the DAO specified by `daoKey`. For example, a capability which sets a property of `User` can specify `subject.user` as the `contextDAOFindKey`.
</p>

<h5>Configure how capabilities appear in a wizard</h5>

<h4>Wizard configuration with root capability</h4>

<p>
Whenever a CRUNCH wizard is started, the root capability is able to configure
global behaviour of the wizard by providing its own EasyCrunchWizard object. It
is important to note that a capability will only configure the wizard if it is
the root capability - usually the most dependant capability in a tree invoked by
the intercept.
</p>

<foam class="foam.flow.widgets.PropertyShortSummary" of="foam.nanos.crunch.Capability" whitelist="['wizardConfig']" />

<p>
The options available for StepWizardConfig are in the scope of wizard documentation.
</p>

<p>
As an example, the following journal entry describes a capability that will
configure the wizard to disallow skipping sections.
</p>

<code>
p({
  "class": "foam.nanos.crunch.Capability",
  "id": "crunch.example",
  "name": "Example Capability",
  "of": "foam.nanos.crunch.example.ExampleData",
  "wizardConfig": {
    "class": "foam.u2.crunch.EasyCrunchWizard",
    "allowSkipping": false
  }
})
</code>

<h4>Wizardlet configuration for a specific capability</h4>

<h5>Specify When the Capability Appears</h5>
<foam class="foam.flow.widgets.DocumentationIncomplete" status="todo" isSection="true" />

<h4>Capability Prerequisites</h4>
<foam class="foam.flow.widgets.DocumentationIncomplete" status="todo" isSection="true" />

<h4>CRUNCH Intercepts</h4>
<foam class="foam.flow.widgets.DocumentationIncomplete" status="todo" isSection="true" />

<h4>Capability Categories</h4>
<foam class="foam.flow.widgets.DocumentationIncomplete" status="todo" isSection="true" />

<h4>Capability User Associations</h4>
<p>
Some applications may support an "acting as" behaviour for users; for example: a user may act on behalf of a company or organization, which is another type of user. When using CORE's application logic, the object `subject` in context has two properties to determine each user.

<foam class="foam.flow.widgets.PropertyShortSummary" of="foam.nanos.auth.Subject" whitelist="['realUser', 'user']" />
</p>

<p>
A capability can specify how the user is associated to the capability using the `associatedEntity` property.

<foam class="foam.flow.widgets.PropertyShortSummary" of="foam.nanos.crunch.Capability" whitelist="['associatedEntity']" />
</p>

<p>
Setting `associatedEntity` to one of these values will affect which user CRUNCH grants the capability to. The default value is USER, so capabilities will be granted to the effective user if this is not set.

<foam class="foam.flow.widgets.EnumSummary" of="foam.nanos.crunch.AssociatedEntity" />
</p>

<h4>Subclasses of Capability</h4>
<foam class="foam.flow.widgets.DocumentationIncomplete" status="todo" isSection="true" />

<h4>CRUNCH Rules</h4>
<foam class="foam.flow.widgets.DocumentationIncomplete" status="todo" isSection="true" />

notes: ValidateUCJDataOnPut sets of-less cap to PENDING, then
       SetUCJStatusOnPut will set it to GRANTED or keep it PENDING (or ??)
